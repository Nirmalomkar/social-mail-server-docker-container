# docker-compose.yml
version: "3"
services:
  app:
    restart: on-failure
    container_name: social-mail-server
    image: ghcr.io/social-mail/social-mail-server-docker-container:main
    depends_on:
      - postgres
    env_file:
      - vars.env
    ports:
      - "80:80"
      - "443:443"
      - "25:25"
    volumes:
      - /var/lib/clamav
      - appdata:/data
    labels:
      - docker-volume-backup.stop-during-backup=true

  postgres:
    container_name: postgres-server
    restart: on-failure
    image: postgres:alpine3.18
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: SocialMail2023
      POSTGRES_DB: SocialMails
      PGDATA: /data/db
    volumes:
      - appdb:/data/db
    labels:
      - docker-volume-backup.stop-during-backup=true

  backup:
      # In production, it is advised to lock your image tag to a proper
      # release version instead of using `latest`.
      # Check https://github.com/offen/docker-volume-backup/releases
      # for a list of available releases.
      image: offen/docker-volume-backup:latest
      restart: always
      env_file: ./backup.env # see below for configuration reference
      volumes:
        - appdata:/backup/my-app-backup:ro
        - appdb:/backup/my-app-db:ro
        # Mounting the Docker socket allows the script to stop and restart
        # the container during backup. You can omit this if you don't want
        # to stop the container. In case you need to proxy the socket, you can
        # also provide a location by setting `DOCKER_HOST` in the container
        - /var/run/docker.sock:/var/run/docker.sock:ro
        # If you mount a local directory or volume to `/archive` a local
        # copy of the backup will be stored there. You can override the
        # location inside of the container by setting `BACKUP_ARCHIVE`.
        # You can omit this if you do not want to keep local backups.
        - /path/to/local_backups:/archive